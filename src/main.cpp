#include <Arduino.h>
#include <U8g2lib.h>
#include<string.h>
#include <STM32FreeRTOS.h>
#include "Knob.h"

enum notes {
  C  = 0,
  Cs = 1,
  D  = 2,
  Ds = 3,
  E  = 4,
  F  = 5,
  Fs = 6,
  G  = 7,
  Gs = 8,
  A  = 9,
  As = 10,
  B  = 11,
  None = 12
};

//Constants
const uint32_t interval = 100; //Display update interval

//Pin definitions
//Row select and enable
const int RA0_PIN = D3;
const int RA1_PIN = D6;
const int RA2_PIN = D12;
const int REN_PIN = A5;

//Matrix input and output
const int C0_PIN = A2;
const int C1_PIN = D9;
const int C2_PIN = A6;
const int C3_PIN = D1;
const int OUT_PIN = D11;

//Audio analogue out
const int OUTL_PIN = A4;
const int OUTR_PIN = A3;

//Joystick analogue in
const int JOYY_PIN = A0;
const int JOYX_PIN = A1;

//Output multiplexer bits
const int DEN_BIT = 3;
const int DRST_BIT = 4;
const int HKOW_BIT = 5;
const int HKOE_BIT = 6;

// This is for 44kHz!!
const int32_t stepSizes [] = {51076057, 54113197, 57330935, 60740010, 64351799, 68178356, 72232452, 76527617, 81078186, 85899346, 91007187, 96418756, };
// const int32_t sine_factor[] = {132, 125, 118, 111, 105, 99, 93, 88, 83, 79, 74, 70};
const int32_t sine_acc[] = {49, 52, 55, 58, 61, 65, 69, 73, 77, 82, 87, 92};

const int16_t lookup_size = 2048;
const int32_t sine_lookup[] = {
0	,
6588387	,
13176712	,
19764913	,
26352928	,
32940695	,
39528151	,
46115236	,
52701887	,
59288042	,
65873638	,
72458615	,
79042909	,
85626460	,
92209205	,
98791081	,
105372028	,
111951983	,
118530885	,
125108670	,
131685278	,
138260647	,
144834714	,
151407418	,
157978697	,
164548489	,
171116732	,
177683365	,
184248325	,
190811551	,
197372981	,
203932553	,
210490206	,
217045877	,
223599506	,
230151030	,
236700388	,
243247517	,
249792358	,
256334847	,
262874923	,
269412525	,
275947592	,
282480061	,
289009871	,
295536961	,
302061269	,
308582734	,
315101294	,
321616889	,
328129457	,
334638936	,
341145265	,
347648383	,
354148229	,
360644742	,
367137860	,
373627523	,
380113669	,
386596237	,
393075166	,
399550396	,
406021864	,
412489512	,
418953276	,
425413098	,
431868915	,
438320667	,
444768293	,
451211734	,
457650927	,
464085813	,
470516330	,
476942419	,
483364019	,
489781069	,
496193509	,
502601279	,
509004318	,
515402566	,
521795963	,
528184448	,
534567963	,
540946445	,
547319836	,
553688076	,
560051103	,
566408860	,
572761285	,
579108319	,
585449903	,
591785976	,
598116478	,
604441351	,
610760535	,
617073970	,
623381597	,
629683357	,
635979190	,
642269036	,
648552837	,
654830534	,
661102068	,
667367379	,
673626408	,
679879097	,
686125386	,
692365218	,
698598533	,
704825272	,
711045377	,
717258790	,
723465451	,
729665303	,
735858287	,
742044345	,
748223418	,
754395449	,
760560379	,
766718151	,
772868706	,
779011986	,
785147934	,
791276492	,
797397602	,
803511207	,
809617248	,
815715670	,
821806413	,
827889421	,
833964637	,
840032003	,
846091463	,
852142959	,
858186434	,
864221832	,
870249095	,
876268167	,
882278991	,
888281511	,
894275670	,
900261412	,
906238681	,
912207419	,
918167571	,
924119082	,
930061894	,
935995952	,
941921200	,
947837582	,
953745043	,
959643527	,
965532978	,
971413341	,
977284561	,
983146583	,
988999351	,
994842809	,
1000676905	,
1006501581	,
1012316784	,
1018122458	,
1023918549	,
1029705003	,
1035481765	,
1041248781	,
1047005996	,
1052753356	,
1058490807	,
1064218296	,
1069935767	,
1075643168	,
1081340445	,
1087027543	,
1092704410	,
1098370992	,
1104027236	,
1109673088	,
1115308496	,
1120933406	,
1126547765	,
1132151521	,
1137744620	,
1143327011	,
1148898640	,
1154459455	,
1160009404	,
1165548435	,
1171076495	,
1176593532	,
1182099495	,
1187594332	,
1193077990	,
1198550419	,
1204011566	,
1209461381	,
1214899812	,
1220326808	,
1225742318	,
1231146290	,
1236538675	,
1241919421	,
1247288477	,
1252645793	,
1257991319	,
1263325005	,
1268646799	,
1273956652	,
1279254515	,
1284540337	,
1289814068	,
1295075658	,
1300325059	,
1305562221	,
1310787095	,
1315999631	,
1321199780	,
1326387493	,
1331562722	,
1336725418	,
1341875532	,
1347013016	,
1352137822	,
1357249900	,
1362349204	,
1367435684	,
1372509294	,
1377569985	,
1382617710	,
1387652421	,
1392674071	,
1397682613	,
1402677999	,
1407660183	,
1412629117	,
1417584755	,
1422527050	,
1427455956	,
1432371426	,
1437273414	,
1442161874	,
1447036759	,
1451898025	,
1456745625	,
1461579513	,
1466399644	,
1471205973	,
1475998455	,
1480777044	,
1485541695	,
1490292364	,
1495029005	,
1499751575	,
1504460029	,
1509154322	,
1513834410	,
1518500249	,
1523151796	,
1527789006	,
1532411836	,
1537020243	,
1541614182	,
1546193612	,
1550758488	,
1555308767	,
1559844407	,
1564365366	,
1568871600	,
1573363067	,
1577839726	,
1582301533	,
1586748446	,
1591180425	,
1595597427	,
1599999410	,
1604386334	,
1608758157	,
1613114837	,
1617456334	,
1621782607	,
1626093615	,
1630389318	,
1634669675	,
1638934646	,
1643184190	,
1647418268	,
1651636840	,
1655839867	,
1660027308	,
1664199124	,
1668355276	,
1672495724	,
1676620431	,
1680729357	,
1684822463	,
1688899710	,
1692961061	,
1697006478	,
1701035921	,
1705049354	,
1709046738	,
1713028036	,
1716993211	,
1720942224	,
1724875039	,
1728791619	,
1732691927	,
1736575926	,
1740443580	,
1744294852	,
1748129706	,
1751948106	,
1755750016	,
1759535401	,
1763304223	,
1767056449	,
1770792043	,
1774510970	,
1778213194	,
1781898680	,
1785567395	,
1789219304	,
1792854372	,
1796472564	,
1800073848	,
1803658188	,
1807225552	,
1810775906	,
1814309215	,
1817825448	,
1821324571	,
1824806551	,
1828271355	,
1831718951	,
1835149305	,
1838562387	,
1841958164	,
1845336603	,
1848697673	,
1852041343	,
1855367580	,
1858676354	,
1861967633	,
1865241387	,
1868497585	,
1871736195	,
1874957188	,
1878160534	,
1881346201	,
1884514160	,
1887664382	,
1890796836	,
1893911493	,
1897008324	,
1900087300	,
1903148391	,
1906191569	,
1909216806	,
1912224072	,
1915213339	,
1918184580	,
1921137766	,
1924072870	,
1926989863	,
1929888719	,
1932769410	,
1935631909	,
1938476189	,
1941302224	,
1944109986	,
1946899450	,
1949670588	,
1952423376	,
1955157787	,
1957873795	,
1960571374	,
1963250500	,
1965911147	,
1968553291	,
1971176905	,
1973781966	,
1976368449	,
1978936330	,
1981485584	,
1984016188	,
1986528117	,
1989021349	,
1991495859	,
1993951624	,
1996388621	,
1998806828	,
2001206221	,
2003586778	,
2005948477	,
2008291295	,
2010615209	,
2012920200	,
2015206244	,
2017473320	,
2019721407	,
2021950483	,
2024160528	,
2026351521	,
2028523441	,
2030676268	,
2032809981	,
2034924561	,
2037019987	,
2039096240	,
2041153301	,
2043191149	,
2045209766	,
2047209132	,
2049189230	,
2051150040	,
2053091543	,
2055013722	,
2056916559	,
2058800035	,
2060664132	,
2062508835	,
2064334123	,
2066139982	,
2067926393	,
2069693341	,
2071440807	,
2073168776	,
2074877232	,
2076566159	,
2078235539	,
2079885359	,
2081515602	,
2083126253	,
2084717297	,
2086288719	,
2087840504	,
2089372637	,
2090885104	,
2092377891	,
2093850984	,
2095304369	,
2096738031	,
2098151959	,
2099546138	,
2100920555	,
2102275198	,
2103610053	,
2104925108	,
2106220351	,
2107495769	,
2108751351	,
2109987084	,
2111202958	,
2112398959	,
2113575079	,
2114731304	,
2115867625	,
2116984030	,
2118080510	,
2119157053	,
2120213650	,
2121250291	,
2122266966	,
2123263665	,
2124240379	,
2125197099	,
2126133816	,
2127050521	,
2127947205	,
2128823861	,
2129680479	,
2130517051	,
2131333571	,
2132130029	,
2132906419	,
2133662733	,
2134398965	,
2135115106	,
2135811152	,
2136487094	,
2137142926	,
2137778643	,
2138394239	,
2138989707	,
2139565042	,
2140120239	,
2140655292	,
2141170196	,
2141664947	,
2142139540	,
2142593970	,
2143028233	,
2143442325	,
2143836243	,
2144209981	,
2144563538	,
2144896909	,
2145210091	,
2145503082	,
2145775879	,
2146028479	,
2146260880	,
2146473079	,
2146665075	,
2146836865	,
2146988449	,
2147119824	,
2147230990	,
2147321945	,
2147392689	,
2147443221	,
2147473541	,
2147483647	,
2147473541	,
2147443221	,
2147392689	,
2147321945	,
2147230990	,
2147119824	,
2146988449	,
2146836865	,
2146665075	,
2146473079	,
2146260880	,
2146028479	,
2145775879	,
2145503082	,
2145210091	,
2144896909	,
2144563538	,
2144209981	,
2143836243	,
2143442325	,
2143028233	,
2142593970	,
2142139540	,
2141664947	,
2141170196	,
2140655292	,
2140120239	,
2139565042	,
2138989707	,
2138394239	,
2137778643	,
2137142926	,
2136487094	,
2135811152	,
2135115106	,
2134398965	,
2133662733	,
2132906419	,
2132130029	,
2131333571	,
2130517051	,
2129680479	,
2128823861	,
2127947205	,
2127050521	,
2126133816	,
2125197099	,
2124240379	,
2123263665	,
2122266966	,
2121250291	,
2120213650	,
2119157053	,
2118080510	,
2116984030	,
2115867625	,
2114731304	,
2113575079	,
2112398959	,
2111202958	,
2109987084	,
2108751351	,
2107495769	,
2106220351	,
2104925108	,
2103610053	,
2102275198	,
2100920555	,
2099546138	,
2098151959	,
2096738031	,
2095304369	,
2093850984	,
2092377891	,
2090885104	,
2089372637	,
2087840504	,
2086288719	,
2084717297	,
2083126253	,
2081515602	,
2079885359	,
2078235539	,
2076566159	,
2074877232	,
2073168776	,
2071440807	,
2069693341	,
2067926393	,
2066139982	,
2064334123	,
2062508835	,
2060664132	,
2058800035	,
2056916559	,
2055013722	,
2053091543	,
2051150040	,
2049189230	,
2047209132	,
2045209766	,
2043191149	,
2041153301	,
2039096240	,
2037019987	,
2034924561	,
2032809981	,
2030676268	,
2028523441	,
2026351521	,
2024160528	,
2021950483	,
2019721407	,
2017473320	,
2015206244	,
2012920200	,
2010615209	,
2008291295	,
2005948477	,
2003586778	,
2001206221	,
1998806828	,
1996388621	,
1993951624	,
1991495859	,
1989021349	,
1986528117	,
1984016188	,
1981485584	,
1978936330	,
1976368449	,
1973781966	,
1971176905	,
1968553291	,
1965911147	,
1963250500	,
1960571374	,
1957873795	,
1955157787	,
1952423376	,
1949670588	,
1946899450	,
1944109986	,
1941302224	,
1938476189	,
1935631909	,
1932769410	,
1929888719	,
1926989863	,
1924072870	,
1921137766	,
1918184580	,
1915213339	,
1912224072	,
1909216806	,
1906191569	,
1903148391	,
1900087300	,
1897008324	,
1893911493	,
1890796836	,
1887664382	,
1884514160	,
1881346201	,
1878160534	,
1874957188	,
1871736195	,
1868497585	,
1865241387	,
1861967633	,
1858676354	,
1855367580	,
1852041343	,
1848697673	,
1845336603	,
1841958164	,
1838562387	,
1835149305	,
1831718951	,
1828271355	,
1824806551	,
1821324571	,
1817825448	,
1814309215	,
1810775906	,
1807225552	,
1803658188	,
1800073848	,
1796472564	,
1792854372	,
1789219304	,
1785567395	,
1781898680	,
1778213194	,
1774510970	,
1770792043	,
1767056449	,
1763304223	,
1759535401	,
1755750016	,
1751948106	,
1748129706	,
1744294852	,
1740443580	,
1736575926	,
1732691927	,
1728791619	,
1724875039	,
1720942224	,
1716993211	,
1713028036	,
1709046738	,
1705049354	,
1701035921	,
1697006478	,
1692961061	,
1688899710	,
1684822463	,
1680729357	,
1676620431	,
1672495724	,
1668355276	,
1664199124	,
1660027308	,
1655839867	,
1651636840	,
1647418268	,
1643184190	,
1638934646	,
1634669675	,
1630389318	,
1626093615	,
1621782607	,
1617456334	,
1613114837	,
1608758157	,
1604386334	,
1599999410	,
1595597427	,
1591180425	,
1586748446	,
1582301533	,
1577839726	,
1573363067	,
1568871600	,
1564365366	,
1559844407	,
1555308767	,
1550758488	,
1546193612	,
1541614182	,
1537020243	,
1532411836	,
1527789006	,
1523151796	,
1518500249	,
1513834410	,
1509154322	,
1504460029	,
1499751575	,
1495029005	,
1490292364	,
1485541695	,
1480777044	,
1475998455	,
1471205973	,
1466399644	,
1461579513	,
1456745625	,
1451898025	,
1447036759	,
1442161874	,
1437273414	,
1432371426	,
1427455956	,
1422527050	,
1417584755	,
1412629117	,
1407660183	,
1402677999	,
1397682613	,
1392674071	,
1387652421	,
1382617710	,
1377569985	,
1372509294	,
1367435684	,
1362349204	,
1357249900	,
1352137822	,
1347013016	,
1341875532	,
1336725418	,
1331562722	,
1326387493	,
1321199780	,
1315999631	,
1310787095	,
1305562221	,
1300325059	,
1295075658	,
1289814068	,
1284540337	,
1279254515	,
1273956652	,
1268646799	,
1263325005	,
1257991319	,
1252645793	,
1247288477	,
1241919421	,
1236538675	,
1231146290	,
1225742318	,
1220326808	,
1214899812	,
1209461381	,
1204011566	,
1198550419	,
1193077990	,
1187594332	,
1182099495	,
1176593532	,
1171076495	,
1165548435	,
1160009404	,
1154459455	,
1148898640	,
1143327011	,
1137744620	,
1132151521	,
1126547765	,
1120933406	,
1115308496	,
1109673088	,
1104027236	,
1098370992	,
1092704410	,
1087027543	,
1081340445	,
1075643168	,
1069935767	,
1064218296	,
1058490807	,
1052753356	,
1047005996	,
1041248781	,
1035481765	,
1029705003	,
1023918549	,
1018122458	,
1012316784	,
1006501581	,
1000676905	,
994842809	,
988999351	,
983146583	,
977284561	,
971413341	,
965532978	,
959643527	,
953745043	,
947837582	,
941921200	,
935995952	,
930061894	,
924119082	,
918167571	,
912207419	,
906238681	,
900261412	,
894275670	,
888281511	,
882278991	,
876268167	,
870249095	,
864221832	,
858186434	,
852142959	,
846091463	,
840032003	,
833964637	,
827889421	,
821806413	,
815715670	,
809617248	,
803511207	,
797397602	,
791276492	,
785147934	,
779011986	,
772868706	,
766718151	,
760560379	,
754395449	,
748223418	,
742044345	,
735858287	,
729665303	,
723465451	,
717258790	,
711045377	,
704825272	,
698598533	,
692365218	,
686125386	,
679879097	,
673626408	,
667367379	,
661102068	,
654830534	,
648552837	,
642269036	,
635979190	,
629683357	,
623381597	,
617073970	,
610760535	,
604441351	,
598116478	,
591785976	,
585449903	,
579108319	,
572761285	,
566408860	,
560051103	,
553688076	,
547319836	,
540946445	,
534567963	,
528184448	,
521795963	,
515402566	,
509004318	,
502601279	,
496193509	,
489781069	,
483364019	,
476942419	,
470516330	,
464085813	,
457650927	,
451211734	,
444768293	,
438320667	,
431868915	,
425413098	,
418953276	,
412489512	,
406021864	,
399550396	,
393075166	,
386596237	,
380113669	,
373627523	,
367137860	,
360644742	,
354148229	,
347648383	,
341145265	,
334638936	,
328129457	,
321616889	,
315101294	,
308582734	,
302061269	,
295536961	,
289009871	,
282480061	,
275947592	,
269412525	,
262874923	,
256334847	,
249792358	,
243247517	,
236700388	,
230151030	,
223599506	,
217045877	,
210490206	,
203932553	,
197372981	,
190811551	,
184248325	,
177683365	,
171116732	,
164548489	,
157978697	,
151407418	,
144834714	,
138260647	,
131685278	,
125108670	,
118530885	,
111951983	,
105372028	,
98791081	,
92209205	,
85626460	,
79042909	,
72458615	,
65873638	,
59288042	,
52701887	,
46115236	,
39528151	,
32940695	,
26352928	,
19764913	,
13176712	,
6588387	,
0	,
-6588387	,
-13176712	,
-19764913	,
-26352928	,
-32940695	,
-39528151	,
-46115236	,
-52701887	,
-59288042	,
-65873638	,
-72458615	,
-79042909	,
-85626460	,
-92209205	,
-98791081	,
-105372028	,
-111951983	,
-118530885	,
-125108670	,
-131685278	,
-138260647	,
-144834714	,
-151407418	,
-157978697	,
-164548489	,
-171116732	,
-177683365	,
-184248325	,
-190811551	,
-197372981	,
-203932553	,
-210490206	,
-217045877	,
-223599506	,
-230151030	,
-236700388	,
-243247517	,
-249792358	,
-256334847	,
-262874923	,
-269412525	,
-275947592	,
-282480061	,
-289009871	,
-295536961	,
-302061269	,
-308582734	,
-315101294	,
-321616889	,
-328129457	,
-334638936	,
-341145265	,
-347648383	,
-354148229	,
-360644742	,
-367137860	,
-373627523	,
-380113669	,
-386596237	,
-393075166	,
-399550396	,
-406021864	,
-412489512	,
-418953276	,
-425413098	,
-431868915	,
-438320667	,
-444768293	,
-451211734	,
-457650927	,
-464085813	,
-470516330	,
-476942419	,
-483364019	,
-489781069	,
-496193509	,
-502601279	,
-509004318	,
-515402566	,
-521795963	,
-528184448	,
-534567963	,
-540946445	,
-547319836	,
-553688076	,
-560051103	,
-566408860	,
-572761285	,
-579108319	,
-585449903	,
-591785976	,
-598116478	,
-604441351	,
-610760535	,
-617073970	,
-623381597	,
-629683357	,
-635979190	,
-642269036	,
-648552837	,
-654830534	,
-661102068	,
-667367379	,
-673626408	,
-679879097	,
-686125386	,
-692365218	,
-698598533	,
-704825272	,
-711045377	,
-717258790	,
-723465451	,
-729665303	,
-735858287	,
-742044345	,
-748223418	,
-754395449	,
-760560379	,
-766718151	,
-772868706	,
-779011986	,
-785147934	,
-791276492	,
-797397602	,
-803511207	,
-809617248	,
-815715670	,
-821806413	,
-827889421	,
-833964637	,
-840032003	,
-846091463	,
-852142959	,
-858186434	,
-864221832	,
-870249095	,
-876268167	,
-882278991	,
-888281511	,
-894275670	,
-900261412	,
-906238681	,
-912207419	,
-918167571	,
-924119082	,
-930061894	,
-935995952	,
-941921200	,
-947837582	,
-953745043	,
-959643527	,
-965532978	,
-971413341	,
-977284561	,
-983146583	,
-988999351	,
-994842809	,
-1000676905	,
-1006501581	,
-1012316784	,
-1018122458	,
-1023918549	,
-1029705003	,
-1035481765	,
-1041248781	,
-1047005996	,
-1052753356	,
-1058490807	,
-1064218296	,
-1069935767	,
-1075643168	,
-1081340445	,
-1087027543	,
-1092704410	,
-1098370992	,
-1104027236	,
-1109673088	,
-1115308496	,
-1120933406	,
-1126547765	,
-1132151521	,
-1137744620	,
-1143327011	,
-1148898640	,
-1154459455	,
-1160009404	,
-1165548435	,
-1171076495	,
-1176593532	,
-1182099495	,
-1187594332	,
-1193077990	,
-1198550419	,
-1204011566	,
-1209461381	,
-1214899812	,
-1220326808	,
-1225742318	,
-1231146290	,
-1236538675	,
-1241919421	,
-1247288477	,
-1252645793	,
-1257991319	,
-1263325005	,
-1268646799	,
-1273956652	,
-1279254515	,
-1284540337	,
-1289814068	,
-1295075658	,
-1300325059	,
-1305562221	,
-1310787095	,
-1315999631	,
-1321199780	,
-1326387493	,
-1331562722	,
-1336725418	,
-1341875532	,
-1347013016	,
-1352137822	,
-1357249900	,
-1362349204	,
-1367435684	,
-1372509294	,
-1377569985	,
-1382617710	,
-1387652421	,
-1392674071	,
-1397682613	,
-1402677999	,
-1407660183	,
-1412629117	,
-1417584755	,
-1422527050	,
-1427455956	,
-1432371426	,
-1437273414	,
-1442161874	,
-1447036759	,
-1451898025	,
-1456745625	,
-1461579513	,
-1466399644	,
-1471205973	,
-1475998455	,
-1480777044	,
-1485541695	,
-1490292364	,
-1495029005	,
-1499751575	,
-1504460029	,
-1509154322	,
-1513834410	,
-1518500249	,
-1523151796	,
-1527789006	,
-1532411836	,
-1537020243	,
-1541614182	,
-1546193612	,
-1550758488	,
-1555308767	,
-1559844407	,
-1564365366	,
-1568871600	,
-1573363067	,
-1577839726	,
-1582301533	,
-1586748446	,
-1591180425	,
-1595597427	,
-1599999410	,
-1604386334	,
-1608758157	,
-1613114837	,
-1617456334	,
-1621782607	,
-1626093615	,
-1630389318	,
-1634669675	,
-1638934646	,
-1643184190	,
-1647418268	,
-1651636840	,
-1655839867	,
-1660027308	,
-1664199124	,
-1668355276	,
-1672495724	,
-1676620431	,
-1680729357	,
-1684822463	,
-1688899710	,
-1692961061	,
-1697006478	,
-1701035921	,
-1705049354	,
-1709046738	,
-1713028036	,
-1716993211	,
-1720942224	,
-1724875039	,
-1728791619	,
-1732691927	,
-1736575926	,
-1740443580	,
-1744294852	,
-1748129706	,
-1751948106	,
-1755750016	,
-1759535401	,
-1763304223	,
-1767056449	,
-1770792043	,
-1774510970	,
-1778213194	,
-1781898680	,
-1785567395	,
-1789219304	,
-1792854372	,
-1796472564	,
-1800073848	,
-1803658188	,
-1807225552	,
-1810775906	,
-1814309215	,
-1817825448	,
-1821324571	,
-1824806551	,
-1828271355	,
-1831718951	,
-1835149305	,
-1838562387	,
-1841958164	,
-1845336603	,
-1848697673	,
-1852041343	,
-1855367580	,
-1858676354	,
-1861967633	,
-1865241387	,
-1868497585	,
-1871736195	,
-1874957188	,
-1878160534	,
-1881346201	,
-1884514160	,
-1887664382	,
-1890796836	,
-1893911493	,
-1897008324	,
-1900087300	,
-1903148391	,
-1906191569	,
-1909216806	,
-1912224072	,
-1915213339	,
-1918184580	,
-1921137766	,
-1924072870	,
-1926989863	,
-1929888719	,
-1932769410	,
-1935631909	,
-1938476189	,
-1941302224	,
-1944109986	,
-1946899450	,
-1949670588	,
-1952423376	,
-1955157787	,
-1957873795	,
-1960571374	,
-1963250500	,
-1965911147	,
-1968553291	,
-1971176905	,
-1973781966	,
-1976368449	,
-1978936330	,
-1981485584	,
-1984016188	,
-1986528117	,
-1989021349	,
-1991495859	,
-1993951624	,
-1996388621	,
-1998806828	,
-2001206221	,
-2003586778	,
-2005948477	,
-2008291295	,
-2010615209	,
-2012920200	,
-2015206244	,
-2017473320	,
-2019721407	,
-2021950483	,
-2024160528	,
-2026351521	,
-2028523441	,
-2030676268	,
-2032809981	,
-2034924561	,
-2037019987	,
-2039096240	,
-2041153301	,
-2043191149	,
-2045209766	,
-2047209132	,
-2049189230	,
-2051150040	,
-2053091543	,
-2055013722	,
-2056916559	,
-2058800035	,
-2060664132	,
-2062508835	,
-2064334123	,
-2066139982	,
-2067926393	,
-2069693341	,
-2071440807	,
-2073168776	,
-2074877232	,
-2076566159	,
-2078235539	,
-2079885359	,
-2081515602	,
-2083126253	,
-2084717297	,
-2086288719	,
-2087840504	,
-2089372637	,
-2090885104	,
-2092377891	,
-2093850984	,
-2095304369	,
-2096738031	,
-2098151959	,
-2099546138	,
-2100920555	,
-2102275198	,
-2103610053	,
-2104925108	,
-2106220351	,
-2107495769	,
-2108751351	,
-2109987084	,
-2111202958	,
-2112398959	,
-2113575079	,
-2114731304	,
-2115867625	,
-2116984030	,
-2118080510	,
-2119157053	,
-2120213650	,
-2121250291	,
-2122266966	,
-2123263665	,
-2124240379	,
-2125197099	,
-2126133816	,
-2127050521	,
-2127947205	,
-2128823861	,
-2129680479	,
-2130517051	,
-2131333571	,
-2132130029	,
-2132906419	,
-2133662733	,
-2134398965	,
-2135115106	,
-2135811152	,
-2136487094	,
-2137142926	,
-2137778643	,
-2138394239	,
-2138989707	,
-2139565042	,
-2140120239	,
-2140655292	,
-2141170196	,
-2141664947	,
-2142139540	,
-2142593970	,
-2143028233	,
-2143442325	,
-2143836243	,
-2144209981	,
-2144563538	,
-2144896909	,
-2145210091	,
-2145503082	,
-2145775879	,
-2146028479	,
-2146260880	,
-2146473079	,
-2146665075	,
-2146836865	,
-2146988449	,
-2147119824	,
-2147230990	,
-2147321945	,
-2147392689	,
-2147443221	,
-2147473541	,
-2147483647	,
-2147473541	,
-2147443221	,
-2147392689	,
-2147321945	,
-2147230990	,
-2147119824	,
-2146988449	,
-2146836865	,
-2146665075	,
-2146473079	,
-2146260880	,
-2146028479	,
-2145775879	,
-2145503082	,
-2145210091	,
-2144896909	,
-2144563538	,
-2144209981	,
-2143836243	,
-2143442325	,
-2143028233	,
-2142593970	,
-2142139540	,
-2141664947	,
-2141170196	,
-2140655292	,
-2140120239	,
-2139565042	,
-2138989707	,
-2138394239	,
-2137778643	,
-2137142926	,
-2136487094	,
-2135811152	,
-2135115106	,
-2134398965	,
-2133662733	,
-2132906419	,
-2132130029	,
-2131333571	,
-2130517051	,
-2129680479	,
-2128823861	,
-2127947205	,
-2127050521	,
-2126133816	,
-2125197099	,
-2124240379	,
-2123263665	,
-2122266966	,
-2121250291	,
-2120213650	,
-2119157053	,
-2118080510	,
-2116984030	,
-2115867625	,
-2114731304	,
-2113575079	,
-2112398959	,
-2111202958	,
-2109987084	,
-2108751351	,
-2107495769	,
-2106220351	,
-2104925108	,
-2103610053	,
-2102275198	,
-2100920555	,
-2099546138	,
-2098151959	,
-2096738031	,
-2095304369	,
-2093850984	,
-2092377891	,
-2090885104	,
-2089372637	,
-2087840504	,
-2086288719	,
-2084717297	,
-2083126253	,
-2081515602	,
-2079885359	,
-2078235539	,
-2076566159	,
-2074877232	,
-2073168776	,
-2071440807	,
-2069693341	,
-2067926393	,
-2066139982	,
-2064334123	,
-2062508835	,
-2060664132	,
-2058800035	,
-2056916559	,
-2055013722	,
-2053091543	,
-2051150040	,
-2049189230	,
-2047209132	,
-2045209766	,
-2043191149	,
-2041153301	,
-2039096240	,
-2037019987	,
-2034924561	,
-2032809981	,
-2030676268	,
-2028523441	,
-2026351521	,
-2024160528	,
-2021950483	,
-2019721407	,
-2017473320	,
-2015206244	,
-2012920200	,
-2010615209	,
-2008291295	,
-2005948477	,
-2003586778	,
-2001206221	,
-1998806828	,
-1996388621	,
-1993951624	,
-1991495859	,
-1989021349	,
-1986528117	,
-1984016188	,
-1981485584	,
-1978936330	,
-1976368449	,
-1973781966	,
-1971176905	,
-1968553291	,
-1965911147	,
-1963250500	,
-1960571374	,
-1957873795	,
-1955157787	,
-1952423376	,
-1949670588	,
-1946899450	,
-1944109986	,
-1941302224	,
-1938476189	,
-1935631909	,
-1932769410	,
-1929888719	,
-1926989863	,
-1924072870	,
-1921137766	,
-1918184580	,
-1915213339	,
-1912224072	,
-1909216806	,
-1906191569	,
-1903148391	,
-1900087300	,
-1897008324	,
-1893911493	,
-1890796836	,
-1887664382	,
-1884514160	,
-1881346201	,
-1878160534	,
-1874957188	,
-1871736195	,
-1868497585	,
-1865241387	,
-1861967633	,
-1858676354	,
-1855367580	,
-1852041343	,
-1848697673	,
-1845336603	,
-1841958164	,
-1838562387	,
-1835149305	,
-1831718951	,
-1828271355	,
-1824806551	,
-1821324571	,
-1817825448	,
-1814309215	,
-1810775906	,
-1807225552	,
-1803658188	,
-1800073848	,
-1796472564	,
-1792854372	,
-1789219304	,
-1785567395	,
-1781898680	,
-1778213194	,
-1774510970	,
-1770792043	,
-1767056449	,
-1763304223	,
-1759535401	,
-1755750016	,
-1751948106	,
-1748129706	,
-1744294852	,
-1740443580	,
-1736575926	,
-1732691927	,
-1728791619	,
-1724875039	,
-1720942224	,
-1716993211	,
-1713028036	,
-1709046738	,
-1705049354	,
-1701035921	,
-1697006478	,
-1692961061	,
-1688899710	,
-1684822463	,
-1680729357	,
-1676620431	,
-1672495724	,
-1668355276	,
-1664199124	,
-1660027308	,
-1655839867	,
-1651636840	,
-1647418268	,
-1643184190	,
-1638934646	,
-1634669675	,
-1630389318	,
-1626093615	,
-1621782607	,
-1617456334	,
-1613114837	,
-1608758157	,
-1604386334	,
-1599999410	,
-1595597427	,
-1591180425	,
-1586748446	,
-1582301533	,
-1577839726	,
-1573363067	,
-1568871600	,
-1564365366	,
-1559844407	,
-1555308767	,
-1550758488	,
-1546193612	,
-1541614182	,
-1537020243	,
-1532411836	,
-1527789006	,
-1523151796	,
-1518500249	,
-1513834410	,
-1509154322	,
-1504460029	,
-1499751575	,
-1495029005	,
-1490292364	,
-1485541695	,
-1480777044	,
-1475998455	,
-1471205973	,
-1466399644	,
-1461579513	,
-1456745625	,
-1451898025	,
-1447036759	,
-1442161874	,
-1437273414	,
-1432371426	,
-1427455956	,
-1422527050	,
-1417584755	,
-1412629117	,
-1407660183	,
-1402677999	,
-1397682613	,
-1392674071	,
-1387652421	,
-1382617710	,
-1377569985	,
-1372509294	,
-1367435684	,
-1362349204	,
-1357249900	,
-1352137822	,
-1347013016	,
-1341875532	,
-1336725418	,
-1331562722	,
-1326387493	,
-1321199780	,
-1315999631	,
-1310787095	,
-1305562221	,
-1300325059	,
-1295075658	,
-1289814068	,
-1284540337	,
-1279254515	,
-1273956652	,
-1268646799	,
-1263325005	,
-1257991319	,
-1252645793	,
-1247288477	,
-1241919421	,
-1236538675	,
-1231146290	,
-1225742318	,
-1220326808	,
-1214899812	,
-1209461381	,
-1204011566	,
-1198550419	,
-1193077990	,
-1187594332	,
-1182099495	,
-1176593532	,
-1171076495	,
-1165548435	,
-1160009404	,
-1154459455	,
-1148898640	,
-1143327011	,
-1137744620	,
-1132151521	,
-1126547765	,
-1120933406	,
-1115308496	,
-1109673088	,
-1104027236	,
-1098370992	,
-1092704410	,
-1087027543	,
-1081340445	,
-1075643168	,
-1069935767	,
-1064218296	,
-1058490807	,
-1052753356	,
-1047005996	,
-1041248781	,
-1035481765	,
-1029705003	,
-1023918549	,
-1018122458	,
-1012316784	,
-1006501581	,
-1000676905	,
-994842809	,
-988999351	,
-983146583	,
-977284561	,
-971413341	,
-965532978	,
-959643527	,
-953745043	,
-947837582	,
-941921200	,
-935995952	,
-930061894	,
-924119082	,
-918167571	,
-912207419	,
-906238681	,
-900261412	,
-894275670	,
-888281511	,
-882278991	,
-876268167	,
-870249095	,
-864221832	,
-858186434	,
-852142959	,
-846091463	,
-840032003	,
-833964637	,
-827889421	,
-821806413	,
-815715670	,
-809617248	,
-803511207	,
-797397602	,
-791276492	,
-785147934	,
-779011986	,
-772868706	,
-766718151	,
-760560379	,
-754395449	,
-748223418	,
-742044345	,
-735858287	,
-729665303	,
-723465451	,
-717258790	,
-711045377	,
-704825272	,
-698598533	,
-692365218	,
-686125386	,
-679879097	,
-673626408	,
-667367379	,
-661102068	,
-654830534	,
-648552837	,
-642269036	,
-635979190	,
-629683357	,
-623381597	,
-617073970	,
-610760535	,
-604441351	,
-598116478	,
-591785976	,
-585449903	,
-579108319	,
-572761285	,
-566408860	,
-560051103	,
-553688076	,
-547319836	,
-540946445	,
-534567963	,
-528184448	,
-521795963	,
-515402566	,
-509004318	,
-502601279	,
-496193509	,
-489781069	,
-483364019	,
-476942419	,
-470516330	,
-464085813	,
-457650927	,
-451211734	,
-444768293	,
-438320667	,
-431868915	,
-425413098	,
-418953276	,
-412489512	,
-406021864	,
-399550396	,
-393075166	,
-386596237	,
-380113669	,
-373627523	,
-367137860	,
-360644742	,
-354148229	,
-347648383	,
-341145265	,
-334638936	,
-328129457	,
-321616889	,
-315101294	,
-308582734	,
-302061269	,
-295536961	,
-289009871	,
-282480061	,
-275947592	,
-269412525	,
-262874923	,
-256334847	,
-249792358	,
-243247517	,
-236700388	,
-230151030	,
-223599506	,
-217045877	,
-210490206	,
-203932553	,
-197372981	,
-190811551	,
-184248325	,
-177683365	,
-171116732	,
-164548489	,
-157978697	,
-151407418	,
-144834714	,
-138260647	,
-131685278	,
-125108670	,
-118530885	,
-111951983	,
-105372028	,
-98791081	,
-92209205	,
-85626460	,
-79042909	,
-72458615	,
-65873638	,
-59288042	,
-52701887	,
-46115236	,
-39528151	,
-32940695	,
-26352928	,
-19764913	,
-13176712	,
-6588387	,
};

const String noteNames [] = {"C","C#","D","D#","E","F","F#","G","G#","A","A#","B"};
volatile uint8_t keyArray[7];

SemaphoreHandle_t keyArrayMutex;
SemaphoreHandle_t stepSizeMutex;

const int32_t int32_max = 2147483647;
const int32_t half_max = 1073741824;
const uint8_t n = 4;

volatile int32_t currentStepSize[n];
// volatile int32_t currentSineFactor[n];
volatile int32_t currentSineAcc[n];
// volatile int32_t currentSineFactor2[n];


// Knob
Knob knob0(7, 0, 0, 0);
Knob knob1(16, 0, 1, 0);
Knob knob2(16, 0, 2, 0);
Knob knob3(16, 0, 3, 16);

//Display driver object
U8G2_SSD1305_128X32_NONAME_F_HW_I2C u8g2(U8G2_R0);

//Function to set outputs using key matrix
void setOutMuxBit(const uint8_t bitIdx, const bool value) {
      digitalWrite(REN_PIN,LOW);
      digitalWrite(RA0_PIN, bitIdx & 0x01);
      digitalWrite(RA1_PIN, bitIdx & 0x02);
      digitalWrite(RA2_PIN, bitIdx & 0x04);
      digitalWrite(OUT_PIN,value);
      digitalWrite(REN_PIN,HIGH);
      delayMicroseconds(2);
      digitalWrite(REN_PIN,LOW);
}

uint8_t readCols() {
      uint8_t cols = 0;
      cols |= digitalRead(C0_PIN) << 0;
      cols |= digitalRead(C1_PIN) << 1;
      cols |= digitalRead(C2_PIN) << 2;
      cols |= digitalRead(C3_PIN) << 3;
      return cols;
}

void setRow(uint8_t rowIdx){
      digitalWrite(REN_PIN,LOW);
      digitalWrite(RA0_PIN, rowIdx & 0x01);
      digitalWrite(RA1_PIN, rowIdx & 0x02);
      digitalWrite(RA2_PIN, rowIdx & 0x04);
      digitalWrite(REN_PIN,HIGH);
}

void findKeywithFunc(void (*func)(notes*)) {
      xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
      uint8_t CDs = keyArray[0];
      uint8_t EG = keyArray[1];
      uint8_t GsB =keyArray[2];
      xSemaphoreGive(keyArrayMutex);
      bool C  = (~CDs >> 0) & B1;
      bool Cs = (~CDs >> 1) & B1;
      bool D  = (~CDs >> 2) & B1;
      bool Ds = (~CDs >> 3) & B1;
      bool E  = (~EG  >> 0) & B1;
      bool F  = (~EG  >> 1) & B1;
      bool Fs = (~EG  >> 2) & B1;
      bool G  = (~EG  >> 3) & B1;
      bool Gs = (~GsB >> 0) & B1;
      bool A  = (~GsB >> 1) & B1;
      bool As = (~GsB >> 2) & B1;
      bool B  = (~GsB >> 3) & B1;
      

      bool bool_array [] = {C, Cs, D, Ds, E, F, Fs, G, Gs, A, As, B};
      notes localNotesPressed [] = {None,None,None,None};

      // Return an array of 2 notes
      bool current_key = false;
      notes current_note = None;
      
      for (int i=0; i<12; i++) {
        current_key = bool_array[i];
        if (current_key) {current_note = ((notes)i);}
        if (current_note != None) {
          if (localNotesPressed[0] == None) {
            localNotesPressed[0] = current_note;
          } else if (localNotesPressed[1] == None){
            localNotesPressed[1] = current_note;
          } else if (localNotesPressed[2] == None){
            localNotesPressed[2] = current_note;
          } else if (localNotesPressed[3] == None){
            localNotesPressed[3] = current_note;
          } 
          /* else if (localNotesPressed[4] == None){
            localNotesPressed[4] = current_note;
          } else if (localNotesPressed[5] == None){
            localNotesPressed[5] = current_note;
          } else if (localNotesPressed[6] == None){
            localNotesPressed[6] = current_note;
          } else if (localNotesPressed[7] == None){
            localNotesPressed[7] = current_note;
          } else if (localNotesPressed[8] == None){
            localNotesPressed[8] = current_note;
          } else if (localNotesPressed[9] == None){
            localNotesPressed[9] = current_note;
          } else {
            //ignore for now
          }
          */
        }
        current_note = None;
      }

      func(localNotesPressed);

      //func(localNotesPressed[0], localNotesPressed[1]);
      // __atomic_store_n(&localNotesPressed,notesPressed,__ATOMIC_RELAXED);
}

void setStepSize(notes* note_list) {

      int32_t localCurrentStepSize;
       // double localCurrentSineFactor2;
      // int32_t localCurrentSineFactor;
      int32_t localCurrentSineAcc;
      for (int i=0; i<n; i++) {
        if (note_list[i] != None) {
          localCurrentStepSize = stepSizes[note_list[i]];
          // localCurrentSineFactor2 = sine_factor_dec[note_list[i]];
          // localCurrentSineFactor = sine_factor[note_list[i]];
          localCurrentSineAcc = sine_acc[note_list[i]];
          xSemaphoreTake(stepSizeMutex, portMAX_DELAY);
          currentStepSize[i] = localCurrentStepSize;
          // currentSineFactor2[i] = localCurrentSineFactor2;
          // currentSineFactor[i] = localCurrentSineFactor;
          currentSineAcc[i] = localCurrentSineAcc;
          xSemaphoreGive(stepSizeMutex);
        } else {
          xSemaphoreTake(stepSizeMutex, portMAX_DELAY);
          currentStepSize[i] = 0;
          currentSineAcc[i] = 0;
          xSemaphoreGive(stepSizeMutex);
        }
      }
}

void setNoteName(notes* note_list) {

      String keyString;
      for (int i=0; i<n; i++) {
        if (note_list[i] != None) {
          keyString += noteNames[note_list[i]];
        }
      }

      u8g2.clearBuffer();         // clear the internal memory
      u8g2.setFont(u8g2_font_ncenB08_tr); // choose a suitable font

      // Key array matrix
      u8g2.setCursor(2,10);
      xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
      u8g2.print(keyArray[0], HEX);
      u8g2.print(keyArray[1], HEX);
      u8g2.print(keyArray[2], HEX);
      u8g2.print(keyArray[3], HEX);
      xSemaphoreGive(keyArrayMutex);

      // Piano note
      u8g2.drawStr(72,10, keyString.c_str());

      // Right hand knob
      u8g2.setCursor(2,20);
      u8g2.print(knob0.get_rotation(), DEC);
      u8g2.setCursor(37,20);
      u8g2.print(knob1.get_rotation(), DEC);
      u8g2.setCursor(72,20);
      u8g2.print(knob2.get_rotation(), DEC);
      u8g2.setCursor(107,20);
      u8g2.print(knob3.get_rotation(), DEC);

      if (knob0.get_rotation() == 0 || knob0.get_rotation() == 1) {
        u8g2.drawStr(2,30,"Saw");
      } else if (knob0.get_rotation() == 2 || knob0.get_rotation() == 3) {
        u8g2.drawStr(2,30,"Sqa");
      } else if (knob0.get_rotation() == 4 || knob0.get_rotation() == 5) {
        u8g2.drawStr(2,30,"Tri");
      } else if (knob0.get_rotation() == 6 || knob0.get_rotation() == 7) {
        u8g2.drawStr(2,30,"Sine");
      }

      u8g2.drawStr(37, 30,"-");
      u8g2.drawStr(72, 30,"-");
      u8g2.drawStr(107, 30,"Vol");
      // transfer internal memory to the display
      u8g2.sendBuffer();          
}

void scanKeysTask(void * pvParameters) {
  const TickType_t xFrequency = 50/portTICK_PERIOD_MS; // Q6a: atttempt to improve knob accuracy by increasing sample rate
  TickType_t xLastWakeTime= xTaskGetTickCount();

  while (true) {
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
    // int32_t localCurrentStepSize[n] = {0,0,0,0}; //TODO: is this critical?

    for (int i = 0; i < 7; i++) { //expanded to read row 3, which is for the right hand knob
        setRow(i);
        delayMicroseconds(2);
        xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
        keyArray[i] = readCols();
        xSemaphoreGive(keyArrayMutex);
    }
    // Call function for setting stepsize
    findKeywithFunc(&setStepSize);

    // Find rotation of knob, protected with a key array mutex?
    xSemaphoreTake(keyArrayMutex, portMAX_DELAY);
    knob3.read(keyArray[3]);
    knob2.read(keyArray[3]);
    knob1.read(keyArray[4]);
    knob0.read(keyArray[4]);
    xSemaphoreGive(keyArrayMutex);
    knob3.update();
    knob2.update();
    knob1.update();
    knob0.update();
  }
}

void displayUpdateTask(void * pvParameters){
  const TickType_t xFrequency = 100/portTICK_PERIOD_MS;
  TickType_t xLastWakeTime= xTaskGetTickCount();
  while (true) {
    vTaskDelayUntil( &xLastWakeTime, xFrequency );

    // Call function for setting notename
    findKeywithFunc(&setNoteName);

    //Toggle LED
    digitalToggle(LED_BUILTIN);
  }

}

void sampleISR(){
  static int32_t phaseAcc[n] = {0,0,0,0};
  static int32_t phaseAcc_sel[n] = {0,0,0,0};
  static int32_t acc[n] = {0,0,0,0};

  int32_t localCurrentStepSize[n];
  // double localCurrentSineFactor2[n];
  // int32_t localCurrentSineFactor[n];
  int32_t localCurrentSineAcc[n];

  for (int i=0; i<n; i++) {
    localCurrentStepSize[i] = currentStepSize[i];
    phaseAcc[i] += localCurrentStepSize[i];
    //localCurrentSineFactor2[i] = currentSineFactor2[i];
    localCurrentSineAcc[i] = currentSineAcc[i];
  }

  if (knob0.get_rotation() == 0 || knob0.get_rotation() == 1) { // Sawtooth
    for (int i=0; i<n; i++) {
      phaseAcc_sel[i] =  phaseAcc[i];
    }
  } else if (knob0.get_rotation() == 2 || knob0.get_rotation() == 3) { // Square: particularly problematic
    for (int i=0; i<n; i++) {
      if (phaseAcc[i] > half_max) {
        phaseAcc_sel[i] = int32_max;
      } else {
        phaseAcc_sel[i] = 0;
      }
    }
  } else if (knob0.get_rotation() == 4 || knob0.get_rotation() == 5) { // Triangular
    for (int i=0; i<n; i++) {
      if (phaseAcc[i]  > half_max) {
        phaseAcc_sel[i]  = -3*int32_max + phaseAcc[i]*4;
      } else {
        phaseAcc_sel[i]  = int32_max - phaseAcc[i]*4;
      }
    }
  } else if (knob0.get_rotation() == 6 || knob0.get_rotation() == 7) {
    for (int i=0; i<n; i++) {
      //phaseAcc_sel[i] = int32_max*sin(localCurrentSineFactor2[i]*phaseAcc[i]);
      //acc[i] += 512*localCurrentStepSize[i]/int32_max;
      acc[i] += localCurrentSineAcc[i];
      if (acc[i] > lookup_size) {
        acc[i] = 0;
      }
      phaseAcc_sel[i]  = sine_lookup[acc[i]];
    }
  }

  int32_t phaseAcc_final = 0;

  if (phaseAcc_sel[0] > phaseAcc_final) {
    phaseAcc_final = phaseAcc_sel[0];
  } else if (phaseAcc_sel[1] > phaseAcc_final) {
    phaseAcc_final = phaseAcc_sel[1];
  } else if (phaseAcc_sel[2] > phaseAcc_final) {
    phaseAcc_final = phaseAcc_sel[2];
  } else if (phaseAcc_sel[3] > phaseAcc_final) {
    phaseAcc_final = phaseAcc_sel[3];
  }

  int32_t Vout = phaseAcc_final >> 24;
  Vout = Vout >> (8 - knob3.get_rotation()/2); // Volume Control
  analogWrite(OUTR_PIN, Vout+128);
 
  /*
  } else if (knob0.get_rotation() == 6 || knob0.get_rotation() == 7) {
    phaseAcc_0_sel = sin(localCurrentSineFactor[0]*acc);
    acc += 1;
    phaseAcc_0_sel = int32_max*sin(3.14*int32_max/localCurrentStepSize[0]*acc_0);
    if (acc_0 >= int32_max/localCurrentStepSize[0]) {
      acc_0 = 0;
    } else {
      acc_0 += 1;
    }
  }
  */
}

void setup() {
  // put your setup code here, to run once:

  //Set pin directions
  pinMode(RA0_PIN, OUTPUT);
  pinMode(RA1_PIN, OUTPUT);
  pinMode(RA2_PIN, OUTPUT);
  pinMode(REN_PIN, OUTPUT);
  pinMode(OUT_PIN, OUTPUT);
  pinMode(OUTL_PIN, OUTPUT);
  pinMode(OUTR_PIN, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);

  pinMode(C0_PIN, INPUT);
  pinMode(C1_PIN, INPUT);
  pinMode(C2_PIN, INPUT);
  pinMode(C3_PIN, INPUT);
  pinMode(JOYX_PIN, INPUT);
  pinMode(JOYY_PIN, INPUT);

  //Initialise display
  setOutMuxBit(DRST_BIT, LOW);  //Assert display logic reset
  delayMicroseconds(2);
  setOutMuxBit(DRST_BIT, HIGH);  //Release display logic reset
  u8g2.begin();
  setOutMuxBit(DEN_BIT, HIGH);  //Enable display power supply

  //Profiling Execution Time of Task
  //1. Disable all tasks except the one being profiled by commenting out the xTaskCreate calls
  //2. Disable the sampleTimer ISR by commenting out the attachInterrupt call
  //3. Change the while loop of your Task into a for loop of 32 iterations
  //4. Make sure your loop runs the WORST CASE scenario of the given task
  //5. Run the program and observe the execution time of the task as an average of 32 iterations

  //Replace your outer while loop with the following:
  //uint32_t startTime = micros();
  //for (int iter = 0; iter < 32; iter++) {
  //   givenTask()
  //}
  //Serial.println(micros()-startTime);


  //Initialise timer
  TIM_TypeDef *Instance = TIM1;
  HardwareTimer *sampleTimer= new HardwareTimer(Instance);
  sampleTimer->setOverflow(44000, HERTZ_FORMAT);
  sampleTimer->attachInterrupt(sampleISR);
  sampleTimer->resume();

  //Initialise Semaphore
  keyArrayMutex = xSemaphoreCreateMutex();
  stepSizeMutex = xSemaphoreCreateMutex();

  //Initialise Keyscanning Loop
  TaskHandle_t scanKeysHandle = NULL;
  xTaskCreate(
    scanKeysTask,/* Function that implements the task */
    "scanKeys",/* Text name for the task */
    512,
    // 64,      /* Stack size in words, not bytes*/
    NULL,/* Parameter passed into the task */
    1,/* Task priority*/
    &scanKeysHandle
  );  /* Pointer to store the task handle*/

  //Initialise Display Loop
  TaskHandle_t displayHandle = NULL;
  xTaskCreate(
    displayUpdateTask,/* Function that implements the task */
    "displayUpdate",/* Text name for the task */
    512,      /* Stack size in words, not bytes*/
    NULL,/* Parameter passed into the task */
    1,/* Task priority*/
    &displayHandle
  );  /* Pointer to store the task handle*/

  vTaskStartScheduler();

  //Initialise UART
  Serial.begin(9600);
  Serial.println("Hello World");
}

void loop() {
}